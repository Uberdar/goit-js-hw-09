{"version":3,"sources":["js/03-promises.js"],"names":["refs","createBtn","document","querySelector","createFDelay","createDStep","createAmount","testX","onFormSubmit","testevent","preventDefault","delay","value","delayValue","step","stepValue","amount","amountValue","currentTarget","elements","i","createPromise","then","position","console","log","catch","Number","Promise","res","rej","shouldResolve","Math","random","setTimeout","addEventListener"],"mappings":";AAAA,MAAMA,EAAO,CACXC,UAAYC,SAASC,cAAe,QAAO,GAC3CC,aAAeF,SAASC,cAAe,QAAO,GAC9CE,YAAcH,SAASC,cAAe,QAAO,GAC7CG,aAAeJ,SAASC,cAAe,QAAO,IAE1CI,EAAQL,SAASC,cAAc,QAGrC,SAASK,EAAaC,GACpBA,EAAUC,iBACN,IAACC,OAAOC,MAAMC,GAAaC,MAAMF,MAAMG,GAAYC,QAAQJ,MAAMK,IAAiBR,EAAUS,cAAcC,SAC3G,IAAA,IAAIC,EAAI,EAAGA,EAAIH,EAAaG,GAAI,EACnCC,EAAcD,EAAI,EAAGP,GAChBS,KAAK,EAAGC,SAAAA,EAAUZ,MAAAA,MAEjBa,QAAQC,2BAA2BF,QAAeZ,SAEnDe,MAAM,EAAGH,SAAAA,EAAUZ,MAAAA,MAEda,QAAQC,0BAA0BF,QAAeZ,SAEnDE,EAAac,OAAOd,GAAcc,OAAOZ,GAMnD,SAASM,EAAcE,EAAUZ,GAExB,OAAA,IAAIiB,QAAQ,CAACC,EAAIC,KAChBC,MAAAA,EAAgBC,KAAKC,SAAW,GACtCC,WAAW,KACLH,EACFF,EAAI,CAACN,SAAAA,EACCZ,MAAAA,IAENmB,EAAI,CAACP,SAAAA,EACHZ,MAAAA,KAEHA,KAjCPJ,EAAM4B,iBAAiB,SAAU3B","file":"03-promises.f4662c87.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  createBtn:  document.querySelector(`form`)[3],\n  createFDelay:  document.querySelector(`form`)[0],\n  createDStep:  document.querySelector(`form`)[1],\n  createAmount:  document.querySelector(`form`)[2],\n}\nconst testX = document.querySelector(\"form\");\ntestX.addEventListener(\"submit\", onFormSubmit);\n\nfunction onFormSubmit(testevent) {\n  testevent.preventDefault();\n  let {delay:{value:delayValue}, step:{value:stepValue}, amount:{value:amountValue} } = testevent.currentTarget.elements\nfor (let i = 0; i < amountValue; i +=1){\n  createPromise(i + 1, delayValue)\n      .then(({ position, delay }) => \n  {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n      .catch(({ position, delay }) => \n          {\n            console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n          });\n          delayValue = Number(delayValue) + Number(stepValue);\n}\n\n}\n\n\nfunction createPromise(position, delay) {\n\n  return new Promise((res,rej) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        res({position,\n              delay})\n      } else {\n        rej({position,\n          delay})\n      }\n    }, delay);\n\n  });\n}\n"]}